package ed25519_test

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/crypto/ed25519"
)

// nolint:lll
func TestPrivKeyEd25519MarshalBinary(t *testing.T) {
	testCases := []struct {
		in  string
		out string // amino compatible
	}{
		{
			"A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97E",
			"A328891040A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97E",
		},
		{
			"0537FB676011F7241B2F1679689A92FED642FCFAE5C31CCC54006632ECEAD2034E9E9000B5C5D329529CDE25D0FEF3E546304CF21BB169088C6E5AF81A18D5E2",
			"A3288910400537FB676011F7241B2F1679689A92FED642FCFAE5C31CCC54006632ECEAD2034E9E9000B5C5D329529CDE25D0FEF3E546304CF21BB169088C6E5AF81A18D5E2",
		},
		{
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			"A32889104000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
	}

	for _, tc := range testCases {
		privkeyBz, err := hex.DecodeString(tc.in)
		require.NoError(t, err)
		require.Equal(t, fmt.Sprintf("%X", len(privkeyBz)), "40")

		var privkey ed25519.PrivKey = privkeyBz

		bz, err := privkey.Marshal()
		require.NoError(t, err)
		require.Equal(t, tc.out, fmt.Sprintf("%X", bz))
		require.Equal(t, tc.out, fmt.Sprintf("%X", privkey.Bytes()))
	}
}

// nolint: lll
func TestPrivKeyEd25519Unmarshal(t *testing.T) {
	testCases := []struct {
		in        string // amino compatible encoding
		out       string
		expectErr bool
	}{
		{
			"A328891040A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97E",
			"A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97E",
			false,
		},
		{
			"A3288910400537FB676011F7241B2F1679689A92FED642FCFAE5C31CCC54006632ECEAD2034E9E9000B5C5D329529CDE25D0FEF3E546304CF21BB169088C6E5AF81A18D5E2",
			"0537FB676011F7241B2F1679689A92FED642FCFAE5C31CCC54006632ECEAD2034E9E9000B5C5D329529CDE25D0FEF3E546304CF21BB169088C6E5AF81A18D5E2",
			false,
		},
		{
			"A32889104000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			false,
		},
		{
			"0DFB100540A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97E",
			"",
			true,
		},
		{
			"A328891041A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97E",
			"",
			true,
		},
		{
			"A328891040A17D5DC7143394DE34BB69FE5431DB64BDD2EA490DAFB33E532F6AB906F75D3DFAA019AD119E70DD0388B011CA4470475A5ABF35D313BFEA6EE3553319FEC97EEE",
			"",
			true,
		},
	}

	for _, tc := range testCases {
		bz, err := hex.DecodeString(tc.in)
		require.NoError(t, err)

		var privkey ed25519.PrivKey

		require.Equal(t, tc.expectErr, privkey.Unmarshal(bz) != nil)
		require.Equal(t, tc.out, fmt.Sprintf("%X", privkey))
	}
}

func TestPubKeyEd25519Marshal(t *testing.T) {
	testCases := []struct {
		in  string
		out string // amino compatible
	}{
		{
			"0000000000000000000000000000000000000000000000000000000000000000",
			"1624DE64200000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			"F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310A",
			"1624DE6420F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310A",
		},
	}

	for _, tc := range testCases {
		pubkeyBz, err := hex.DecodeString(tc.in)
		require.NoError(t, err)
		require.Equal(t, fmt.Sprintf("%X", len(pubkeyBz)), "20")

		var pubkey ed25519.PubKey = pubkeyBz

		bz, err := pubkey.Marshal()
		require.NoError(t, err)
		require.Equal(t, tc.out, fmt.Sprintf("%X", bz))
		require.Equal(t, tc.out, fmt.Sprintf("%X", pubkey.Bytes()))
	}
}

func TestPubKeyEd25519Unmarshal(t *testing.T) {
	testCases := []struct {
		in        string // amino compatible encoding
		out       string
		expectErr bool
	}{
		{
			"1624DE6420F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310A",
			"PubKeyEd25519{F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310A}",
			false,
		},
		{
			"1624DE64200000000000000000000000000000000000000000000000000000000000000000",
			"PubKeyEd25519{0000000000000000000000000000000000000000000000000000000000000000}",
			false,
		},
		{
			"0DFB100520F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310A",
			"PubKeyEd25519{}",
			true,
		},
		{
			"1624DE6421F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310A",
			"PubKeyEd25519{}",
			true,
		},
		{
			"1624DE6420F85678BD3C00EE053F6255B70A4AF2F645151C2884C6189F7646C199B282310AAA",
			"PubKeyEd25519{}",
			true,
		},
	}

	for _, tc := range testCases {
		bz, err := hex.DecodeString(tc.in)
		require.NoError(t, err)

		var pubkey ed25519.PubKey
		require.Equal(t, tc.expectErr, pubkey.Unmarshal(bz) != nil)
		require.Equal(t, tc.out, pubkey.String())
	}
}
